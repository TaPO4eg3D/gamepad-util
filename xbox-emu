#!/usr/bin/python

from __future__ import print_function

import os
import argparse

import glob
import evdev
import sys
import time
import select


CONFIG_PATH = f'{os.path.expanduser("~")}/.config/xbox-emu.cfg'


def list_active_evdev():
    '''Lists the next /dev/input/event* devices to generate input events.
       Will usually only be a single device.'''

    devices = []
    for dev in glob.glob('/dev/input/event*'):
        try:
            devices.append(evdev.device.InputDevice(dev))
        except (IOError, OSError):
            # Don't have permissions for that device, ignore it.
            pass
    devices = {dev.fd: dev for dev in devices}

    output = []
    anyInput = False
    while not anyInput:
        # use select to wait for input
        r, w, x = select.select(devices, [], [])
        for fd in r:
            for event in list(devices[fd].read())[:1]:
                output.append(devices[fd].fn)
                anyInput = True

    return output


# From http://stackoverflow.com/a/231216
class flushfile(object):
    '''Wrapper around a file object that flushes after every write.'''

    def __init__(self, f):
        self.f = f

    def __getattr__(self, name):
        return object.__getattribute__(self.f, name)

    def write(self, x):
        self.f.write(x)
        self.f.flush()


def convert_keycode_to_name(code):
    '''Convert a keycode number to a string xboxdrv understands.'''

    if code in evdev.ecodes.keys:
        keys = evdev.ecodes.keys[code]
        if not isinstance(keys, str):
            return keys[0]
        else:
            return keys
    else:
        # Workaround supported since xboxdrv v0.6.0 for unnamed keys
        return 'KEY_#%d' % code


def eat_events(dev):
    '''Consume and ignore events on a device until there are none.'''

    while dev.read_one() is not None:
        pass


def get_next_pressed_button_name(dev):
    '''Wait for the next button press and report its xboxdrv name.'''

    for event in dev.read_loop():
        if event.type == evdev.ecodes.EV_KEY:
            if event.value == evdev.KeyEvent.key_down:
                return convert_keycode_to_name(event.code)


def get_next_maxed_axis(dev, mappings):
    '''Wait for any axis (joystick direction or analog button) to reach
       an extreme value and report which axis did so along with whether
       it hit the "min" or "max" value.'''

    for event in dev.read_loop():
        # Allow the user to cancel by pressing the "start" button.
        if event.type == evdev.ecodes.EV_KEY:
            if event.value == evdev.KeyEvent.key_down:
                if convert_keycode_to_name(event.code) == mappings['start']:
                    return None, None
        # If an axis has been moved...
        elif event.type == evdev.ecodes.EV_ABS:
            # ... look up the min/max values for that axis...
            absinfo = dict(dev.capabilities()[evdev.ecodes.EV_ABS])[event.code]
            axis = evdev.ecodes.ABS[event.code]
            # ... and if the min or max has been reached, return it.
            if event.value == absinfo.min:
                return 'min', axis
            elif event.value == absinfo.max:
                return 'max', axis


def ask_user_for_keymap(dev):
    '''Generates a mapping for buttons by listing all of the XBox controller
       buttons and having the user press the corresponding button on their
       controller.'''

    xbox_button_names = [
        ('start', None),
        ('back', 'or select'),
        ('guide', 'large center button'),
        ('a', 'bottom (green)'),
        ('b', 'right (red)'),
        ('x', 'left (blue)'),
        ('y', 'top (yellow)'),
        ('black', None),
        ('white', None),
        ('lb', 'left trigger (front, digital) (L1)'),
        ('rb', 'right trigger (front, digital) (R1)'),
        ('lt', 'left trigger (back, analog) (L2)'),
        ('rt', 'right trigger (back, analog) (R2)'),
        ('tl', 'left analog stick button (L3)'),
        ('tr', 'right analog stick button (R3)'),
        ('du', 'd-pad up'),
        ('dr', 'd-pad right'),
        ('dl', 'd-pad left'),
        ('dd', 'd-pad down'),
        ('green', 'guitar button'),
        ('red', 'guitar button'),
        ('yellow', 'guitar button'),
        ('blue', 'guitar button'),
        ('orange', 'guitar button'),
    ]

    print(
        "Press the corresponding button on your controller. If the button doesn't exist, or doesn't register"
        ", press the start button again to ignore it. It might act as an axis, we will register that later."
    )
    # Dictionary of XBox buttons to xboxdrv key names.
    mappings = {}
    # Values of mappings dictionary to avoid mapping the same button twice.
    assigned_keys = set()
    for button, description in xbox_button_names:
        if description is not None:
            description = ' (%s)' % description
        else:
            description = ''
        print("Press %s%s: " % (button, description), end="")
        key = get_next_pressed_button_name(dev)
        if key in assigned_keys:
            # If the button is already assigned, then a repeat means this
            #   button should not have a mapping.
            print("(none)")
        else:
            mappings[button] = key
            assigned_keys.add(key)
            print(key)

    return mappings


def get_evdev_keymap_for_mappings(mappings):
    '''Converts a mappings dictionary in the format of XBox button names
       mapped to xboxdrv key names of the key on the controller that should
       be mapped to that XBox button to the format taken by xboxdrv as
       the command line option --evdev-keymap.'''

    return ','.join(["%s=%s" % (mappings[button], button)
                     for button in mappings])


def ask_user_for_axismap(dev, mappings):
    '''Generates a mapping for the axes by for each XBox axis, asking the
       user to max out the axis on their controller to map to that axis.'''

    xbox_axis_names = [
        # y-axes are inverted in xboxdrv's uinput_config.cpp:120-3
        #   for some reason
        ('x1', ('left', 'right'), 'left analog stick (left/right)'),
        ('y1', ('down', 'up'), 'left analog stick (up/down)'),
        ('x2', ('left', 'right'), 'right anlog stick (left/right)'),
        ('y2', ('down', 'up'), 'right anlog stick (up/down)'),
        ('lt', ('trigger',), 'left analog trigger (L or L2 button)'),
        ('rt', ('trigger',), 'right analog trigger (R or R2 button)'),
        ('dpad_x', ('left', 'right'), 'dpad (left/right)'),
        ('dpad_y', ('up', 'down'), 'dpad (up/down)'),
    ]

    print(
        "Move the corresponding axis on your controller."
        "If the axis doesn't exist, press the start button to ignore it."
    )
    axis_mapping = {}
    for axis, dirs, description in xbox_axis_names:
        # Is this an axis that can be moved in both directions (a joystick)?
        if len(dirs) == 2:
            # For an axis, we need to both identify which axis it is and
            #   whether the axis needs to be flipped, so we will ask the
            #   user to move the axis in both directions... of course,
            #   they might not move the same axis both times, so we need
            #   to check for that.
            same_axis = False  # Were both readings on the same axis?
            while not same_axis:
                evaxis = None  # Which axis has been used so far?
                inverse = None  # Is the axis
                for d in dirs:
                    # Ignore events for half a second to give axes a chance
                    #   to reset.
                    time.sleep(0.5)
                    eat_events(dev)

                    print('Move %s (%s) %s: ' % (axis, description, d), end="")
                    level, evaxis = get_next_maxed_axis(dev, mappings)
                    if evaxis is None:
                        # get_next_maxed_axis() was cancelled, so the user
                        #   does not want to map this axis.
                        same_axis = True
                        print('(none)')
                    else:
                        print('%s (%s)' % (evaxis, level))
                        # There's only two loop iterations:
                        #   d == dirs[0] and d == dirs[1].
                        # If this is the second iteration and the evaxis
                        #   is different, then we need to try again.
                        if d == dirs[1] and prev_evaxis != evaxis:
                            print("different axes were moved; please try again")
                            same_axis = False
                        else:
                            # Remember the previous iteration's values (if any)
                            prev_evaxis = evaxis
                            prev_inverse = inverse
                            # The first direction is the min direction.
                            if d == dirs[0] and level == 'min' \
                                    or d == dirs[1] and level == 'max':
                                inverse = False
                            else:
                                inverse = True
                            # Was it moved in the same direction both times?
                            if d == dirs[1] and prev_inverse != inverse:
                                print("please move axis in the requested direction")
                                same_axis = False
                            else:
                                # If we get here, then the same axis was moved
                                #   in two different directions, so we believe
                                #   evaxis and inverse are correct.
                                axis_mapping[axis] = (evaxis, inverse)
                                # And we can exit the loop.
                                same_axis = True
        # Otherwise, it's an analog button/trigger.
        else:
            # Ignore events for half a second to give axes a chance to reset.
            time.sleep(0.5)
            eat_events(dev)

            print('Press trigger %s (%s) all the way: ' % (axis, description),
                  end="")
            level, evaxis = get_next_maxed_axis(dev, mappings)
            if evaxis is None:
                # get_next_maxed_axis() was cancelled, so the user does not
                #   want to map this axis.
                print("(none)")
            else:
                # We expect pressing a trigger to max its value, so if the
                #   level is actually its min, then the axis needs to be
                #   inverted.
                axis_mapping[axis] = (evaxis, level == 'min')
                print(evaxis)

    # Return the results in the format for the --evdev-absmap and --axis-map
    #   xboxdrv options.
    return (','.join(["%s=%s" % (axis_mapping[axis][0], axis)
                      for axis in axis_mapping]),
            # Invert axes by listing them in the --axis-map with a minus sign.
            ','.join(['-%s=%s' % (axis, axis)
                      for axis in axis_mapping
                      if axis_mapping[axis][1]]))


def detect_gamepad():
    sys.stdout = flushfile(sys.stdout)

    global dev
    global evdev_filename

    fns = None
    # Keep going until there's input from only one device.
    while fns is None or len(fns) != 1:
        print("Press any button on only the joystick you are setting up.")
        fns = list_active_evdev()
    evdev_filename = fns[0]
    print("Selected event device: %s" % evdev_filename)
    print("Stop pressing any buttons.")
    # Give user time to stop pressing buttons.
    time.sleep(2)

    dev = evdev.device.InputDevice(evdev_filename)


def generate_command():
    detect_gamepad()

    mappings = ask_user_for_keymap(dev)
    evdev_keymap = get_evdev_keymap_for_mappings(mappings)
    evdev_absmap, axismap = ask_user_for_axismap(dev, mappings)

    command = "xboxdrv --evdev \"{}\" --evdev-keymap \"%s\" --evdev-absmap \"%s\" --axismap \"%s\" --mimic-xpad --silent" \
              % (evdev_keymap, evdev_absmap, axismap)

    return command


def save_command(command):
    with open(CONFIG_PATH, 'w+') as f:
        f.write(command)


def get_command():
    if not os.path.exists(CONFIG_PATH):
        return

    with open(CONFIG_PATH, 'r') as f:
        return f.read()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='All-in-one utility for configuring and emulating Xbox controller. '
        'It stores the resulting (generated) xboxdrv command in ~/.config/xbox-emu.cfg',
    )
    parser.add_argument(
        '--emulate',
        action='store_true',
        help='Run generated command that stores in '
        '~/.config/xbox-emu.cfg. If you don\'t have one, it raises an error.\n\n'
        'To make it work, run the --setup command at first',
    )
    parser.add_argument(
        '--setup',
        action='store_true',
        help='Run interactive setup for Xbox controller emulation. It saves '
        'the genereated xboxdrv command in ~/.config/xbox-emu.cfg file',
    )
    parser.add_argument(
        '--identify',
        action='store_true',
        help='Identify the name of /dev/input/event* after pressing any button on the gamepad',
    )

    args = vars(parser.parse_args())

    if list(args.values()).count(True) != 1:
        print('You should specify one and only one option! Type --help for more')
        exit

    if args.get('identify'):
        detect_gamepad()

    if args.get('emulate'):
        command = get_command()
        if not command:
            print('The config does not exists or empty! Run --setup command')
        else:
            detect_gamepad()
            os.system('sudo ' + command.format(evdev_filename))

    if args.get('setup'):
        command = generate_command()
        save_command(command)

        print('The command is saved to ~/.config/xbox-emu.cfg')
